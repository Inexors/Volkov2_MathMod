var="TAVG",
date_min="1999-01-01",
date_max="2003-12-31")
# Занесем данные в таблицу, объединив их:
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
mutate(month=month(date)) %>%
group_by(month, id) %>%
# Найдем месячный d и cумму активных температур для каждой станции:
mutate(d = length(tavg[tavg>80])/length(tavg)) %>%
summarise(tavg = sum(tavg[tavg>50], na.rm=TRUE)/10, d = mean(d)) %>%
# Сгруппировав данные по месяцам,
group_by(month) %>%
# найдем средние активные температуры и d для каждого месяца:
summarise(s = mean(tavg, na.rm = TRUE), d = mean(d)) %>%
filter(month>=4 & month <=7) %>%
# Добавим колонки для расчета:
mutate (a = af[4:7], b = bf[4:7]) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
View(clean_data)
View(clean_data)
# Волков Иван – для региона 3 рассчитайте урожайность пшеницы в период с 1999 по 2003
# год взяв для рассчета средние суммы активных температур за эти годы,
# с 12 ближайших метеостанций но рассчитав колонку di самостоятельно, как долю месяца,
# когда среднедневные температуры были выше 8 градусов, но учитывая, что посев не может начаться раньше середины апреля,
# а вегетация составляет 3 месяца
# 	Республика Бурятия - 51.823515, 107.590539 Улан-Удэ
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
# Константы
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
lat = 51.823515; lon = 107.590539
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
ulan_ude = data.frame(id = "ULAN-UDE", latitude = lat,  longitude = lon)
#найдем станции, соответствующие критериям
ulan_ude_around = meteo_nearby_stations(lat_lon_df = ulan_ude, station_data = station_data,
limit = 12, var = "TAVG",
year_min = 1999, year_max = 2003)
# Создадим таблицу
all_data = tibble()
for (i in 1:12)
{
# Определим станцию из 7 ближайших:
ulan_ude_id = ulan_ude_around[["ULAN-UDE"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = ulan_ude_id,
var="TAVG",
date_min="1999-01-01",
date_max="2003-12-31")
# Занесем данные в таблицу, объединив их:
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
mutate(month=month(date)) %>%
group_by(month, id) %>%
# Найдем месячный d и cумму активных температур для каждой станции:
mutate(d = length(tavg[tavg>80])/length(tavg)) %>%
summarise(tavg = sum(tavg[tavg>50], na.rm=TRUE)/10, d = mean(d)) %>%
# Сгруппировав данные по месяцам,
group_by(month) %>%
# найдем средние активные температуры и d для каждого месяца:
summarise(s = mean(tavg, na.rm = TRUE), d = mean(d)) %>%
filter(month>=4 & month <=7) %>%
# Добавим колонки для расчета:
mutate (a = af[4:7], b = bf[4:7]) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
View(all_data)
View(clean_data)
# Волков Иван – для региона 3 рассчитайте урожайность пшеницы в период с 1999 по 2003
# год взяв для рассчета средние суммы активных температур за эти годы,
# с 12 ближайших метеостанций но рассчитав колонку di самостоятельно, как долю месяца,
# когда среднедневные температуры были выше 8 градусов, но учитывая, что посев не может начаться раньше середины апреля,
# а вегетация составляет 3 месяца
# 	Республика Бурятия - 51.823515, 107.590539 Улан-Удэ
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
# Константы
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
lat = 51.823515; lon = 107.590539
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
ulan_ude = data.frame(id = "ULAN-UDE", latitude = lat,  longitude = lon)
#найдем станции, соответствующие критериям
ulan_ude_around = meteo_nearby_stations(lat_lon_df = ulan_ude, station_data = station_data,
limit = 12, var = "TAVG",
year_min = 1999, year_max = 2003)
# Создадим таблицу
all_data = tibble()
for (i in 1:12)
{
# Определим станцию из 7 ближайших:
ulan_ude_id = ulan_ude_around[["ULAN-UDE"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = ulan_ude_id,
var="TAVG",
date_min="1999-01-01",
date_max="2003-12-31")
# Занесем данные в таблицу, объединив их:
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
mutate(month=month(date)) %>%
group_by(month, id) %>%
# Найдем месячный d и cумму активных температур для каждой станции:
mutate(d = length(tavg[tavg>80],  na.rm=TRUE)/length(tavg)) %>%
summarise(tavg = sum(tavg[tavg>50], na.rm=TRUE)/10, d = mean(d)) %>%
# Сгруппировав данные по месяцам,
group_by(month) %>%
# найдем средние активные температуры и d для каждого месяца:
summarise(s = mean(tavg, na.rm = TRUE), d = mean(d)) %>%
filter(month>=4 & month <=7) %>%
# Добавим колонки для расчета:
mutate (a = af[4:7], b = bf[4:7]) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
# Волков Иван – для региона 3 рассчитайте урожайность пшеницы в период с 1999 по 2003
# год взяв для рассчета средние суммы активных температур за эти годы,
# с 12 ближайших метеостанций но рассчитав колонку di самостоятельно, как долю месяца,
# когда среднедневные температуры были выше 8 градусов, но учитывая, что посев не может начаться раньше середины апреля,
# а вегетация составляет 3 месяца
# 	Республика Бурятия - 51.823515, 107.590539 Улан-Удэ
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
# Константы
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
lat = 51.823515; lon = 107.590539
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
ulan_ude = data.frame(id = "ULAN-UDE", latitude = lat,  longitude = lon)
#найдем станции, соответствующие критериям
ulan_ude_around = meteo_nearby_stations(lat_lon_df = ulan_ude, station_data = station_data,
limit = 12, var = "TAVG",
year_min = 1999, year_max = 2003)
# Создадим таблицу
all_data = tibble()
for (i in 1:12)
{
# Определим станцию из 7 ближайших:
ulan_ude_id = ulan_ude_around[["ULAN-UDE"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = ulan_ude_id,
var="TAVG",
date_min="1999-01-01",
date_max="2003-12-31")
# Занесем данные в таблицу, объединив их:
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
mutate(month=month(date)) %>%
group_by(month, id) %>%
# Найдем месячный d и cумму активных температур для каждой станции:
mutate(d = length(tavg[tavg>80])/length(tavg)) %>%
summarise(tavg = sum(tavg[tavg>50])/10, d = mean(d)) %>%
# Сгруппировав данные по месяцам,
group_by(month) %>%
# найдем средние активные температуры и d для каждого месяца:
summarise(s = mean(tavg, na.rm = TRUE), d = mean(d)) %>%
filter(month>=4 & month <=7) %>%
# Добавим колонки для расчета:
mutate (a = af[4:7], b = bf[4:7]) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
# Волков Иван – для региона 3 рассчитайте урожайность пшеницы в период с 1999 по 2003
# год взяв для рассчета средние суммы активных температур за эти годы,
# с 12 ближайших метеостанций но рассчитав колонку di самостоятельно, как долю месяца,
# когда среднедневные температуры были выше 8 градусов, но учитывая, что посев не может начаться раньше середины апреля,
# а вегетация составляет 3 месяца
# 	Республика Бурятия - 51.823515, 107.590539 Улан-Удэ
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
# Константы
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
lat = 51.823515; lon = 107.590539
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
ulan_ude = data.frame(id = "ULAN-UDE", latitude = lat,  longitude = lon)
#найдем станции, соответствующие критериям
ulan_ude_around = meteo_nearby_stations(lat_lon_df = ulan_ude, station_data = station_data,
limit = 12, var = "TAVG",
year_min = 1999, year_max = 2003)
# Создадим таблицу
all_data = tibble()
for (i in 1:12)
{
# Определим станцию из 7 ближайших:
ulan_ude_id = ulan_ude_around[["ULAN-UDE"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = ulan_ude_id,
var="TAVG",
date_min="1999-01-01",
date_max="2003-12-31")
# Занесем данные в таблицу, объединив их:
all_data = bind_rows(all_data, data)
}
# Изменения в таблице сохранятся в векторе clean_data.
clean_data = all_data %>%
# Добавим колонку month для группировки данных:
mutate(month=month(date)) %>%
group_by(month, id) %>%
# Найдем месячный d и cумму активных температур для каждой станции:
mutate(d = length(tavg[tavg>80])/length(tavg)) %>%
summarise(tavg = sum(tavg[tavg>50])/10, d = mean(d)) %>%
# Сгруппировав данные по месяцам,
group_by(month) %>%
# найдем средние активные температуры и d для каждого месяца:
summarise(s = mean(tavg, na.rm = TRUE), d = mean(d)) %>%
filter(month>=4 & month <=7) %>%
# Добавим колонки для расчета:
mutate (a = af[4:7], b = bf[4:7]) %>%
# Рассчитаем урожайность для каждого месяца:
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
# Волков Иван – для региона 3 рассчитайте урожайность пшеницы в период с 1999 по 2003
# год взяв для рассчета средние суммы активных температур за эти годы,
# с 12 ближайших метеостанций но рассчитав колонку di самостоятельно, как долю месяца,
# когда среднедневные температуры были выше 8 градусов, но учитывая, что посев не может начаться раньше середины апреля,
# а вегетация составляет 3 месяца
# 	Республика Бурятия - 51.823515, 107.590539 Улан-Удэ
# Подключим библиотеки:
library(tidyverse)
library(rnoaa)
library(lubridate)
# Создадим векторы с данными для расчета:
af = c(0.00,0.00,0.00,32.11, 26.31,25.64,23.20,18.73,16.30,13.83,0.00,0.00)
bf = c(0.00, 0.00, 0.00, 11.30, 9.26, 9.03,8.16, 6.59, 5.73, 4.87, 0.00, 0.00)
# Константы
Kf = 300 #  Коэффициент использования ФАР
Qj = 1600 # калорийность урожая культуры
Lj = 2.2 #  сумма частей основной и побочной продукции
Ej = 25 #   стандартная влажность культуры
lat = 51.823515; lon = 107.590539
# station_data = ghcnd_stations()
# write.csv(station_data, "station_data.csv")
station_data = read.csv("station_data.csv")
# Получим список метеостанций
ulan_ude = data.frame(id = "ULAN-UDE", latitude = lat,  longitude = lon)
#найдем станции, соответствующие критериям
ulan_ude_around = meteo_nearby_stations(lat_lon_df = ulan_ude, station_data = station_data,
limit = 12, var = "TAVG",
year_min = 1999, year_max = 2003)
# Создадим таблицу
all_data = tibble()
for (i in 1:12)
{
# Определим станцию из 7 ближайших:
ulan_ude_id = ulan_ude_around[["ULAN-UDE"]][["id"]][i]
# Загрузим данные для станции:
data = meteo_tidy_ghcnd(stationid = ulan_ude_id,
var="TAVG",
date_min="1999-01-01",
date_max="2003-12-31")
# Занесем данные в таблицу, объединив их:
all_data = bind_rows(all_data, data)
}
# # Изменения в таблице сохранятся в векторе clean_data.
# clean_data = all_data %>%
#   # Добавим колонку month для группировки данных:
#   mutate(month=month(date)) %>%
#   group_by(month, id) %>%
#   # Найдем месячный d и cумму активных температур для каждой станции:
#   mutate(d = length(tavg[tavg>80])/length(tavg)) %>%
#
#   summarise(tavg = sum(tavg[tavg>50])/10, d = mean(d)) %>%
#   # Сгруппировав данные по месяцам,
#   group_by(month) %>%
#   # найдем средние активные температуры и d для каждого месяца:
#   summarise(s = mean(tavg, na.rm = TRUE), d = mean(d)) %>%
#   filter(month>=4 & month <=7) %>%
#   # Добавим колонки для расчета:
#   mutate (a = af[4:7], b = bf[4:7]) %>%
#   # Рассчитаем урожайность для каждого месяца:
#   mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
clean_data =   all_data %>%
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE), d = length(tavg[tavg>80])/length(tavg) ) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE), d= mean(d)) %>%
mutate (a = ai[3:12], b = bi[3:12]) %>%
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
clean_data =   all_data %>%
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE), d = length(tavg[tavg>80])/length(tavg) ) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE), d= mean(d)) %>%
mutate (a = af[3:12], b = bf[3:12]) %>%
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
clean_data =   all_data %>%
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE), d = length(tavg[tavg>80])/length(tavg) ) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE), d= mean(d)) %>%
mutate (a = af[4:7], b = bf[4:7]) %>%
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
clean_data =   all_data %>%
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE), d = length(tavg[tavg>80])/length(tavg) ) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE), d= mean(d)) %>%
filter(month>=4 & month <=7) %>%
mutate (a = af[4:7], b = bf[4:7]) %>%
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
clean_data =   all_data %>%
mutate(year = year(date), month = month(date)) %>%
mutate(tavg = tavg/10) %>%
filter(tavg > 10) %>%
group_by(year, month, id) %>%
summarize(summ = sum(tavg, na.rm=TRUE), d = length(tavg[tavg>8])/length(tavg) ) %>%
group_by(month) %>%
summarize(s = mean(summ, na.rm = TRUE), d= mean(d)) %>%
filter(month>=4 & month <=7) %>%
mutate (a = af[4:7], b = bf[4:7]) %>%
mutate (fert = ((a + b * 1.0 * s) * d * Kf) / (Qj * Lj * (100-Ej)) )
#Согласно расчету, урожайность пшеницы в Бурятии в 1999-2003 составила:
Yield = sum(clean_data$fert); Yield
# Волков Иван создайте модель множественной линейной регрессии потоков дневных потоков паров воды за осенний период 2013
# года по данным измерений методом турбулентной пульсации
library("tidyverse")  #целая вселенная
library("readr")      #функция read_csv()
library("stringr")    #функция str_replace_all
library("dplyr")      #функции: filter(); arrange(); select(); mutate(); summarize(); group_by(); sample_n()
library("ggplot2")    #Графики функцией qplot()
#подключаем библиотеки
library("tidyverse")
library("stringr")
library("dplyr")
library("ggplot2")
#читаем данные из файла, пропускаем первую строку, заменяем текстовые 'NA', пустые и сгенерированные пороговые значения на NA, игнорируем строки с "["
eddypro = read_csv("eddypro.csv", skip = 1, na=c("","NA","-9999","-9999.0"), comment=c("["))
eddypro = eddypro[-1, ]
eddypro = select(eddypro, -(roll))
#преобразуем строковые значения в факторные
eddypro = eddypro %>% mutate_if(is.character, factor)
#заменяем конфликтующие знаки колонок
names(eddypro) = names(eddypro) %>%
str_replace_all("[!]", "_emph_") %>%
str_replace_all("[?]", "_quest_") %>%
str_replace_all("[*]", "_star_") %>%
str_replace_all("[+]", "_plus_") %>%
str_replace_all("[-]", "_minus_") %>%
str_replace_all("[@]", "_at_") %>%
str_replace_all("[$]", "_dollar_") %>%
str_replace_all("[#]", "_hash_") %>%
str_replace_all("[/]", "_div_") %>%
str_replace_all("[%]", "_perc_") %>%
str_replace_all("[&]", "_amp_") %>%
str_replace_all("[\\^]", "_power_") %>%
str_replace_all("[()]", "L_")
glimpse(eddypro)
# уберем na
eddypro = drop_na(eddypro)
#осенний период, дневное время
eddypro = filter(eddypro, DOY >= 245 & DOY < 335)
eddypro = filter(eddypro, daytime==TRUE)
#переменные типов numeric и  не numeric отдельно
eddypro_numeric = eddypro[,sapply(eddypro,is.numeric) ]
eddypro_non_numeric = eddypro[,!sapply(eddypro,is.numeric) ]
#создадим выборки
row_numbers = 1:length(eddypro_numeric$h2o_flux)
#обучающая выборка
teach = sample(row_numbers, floor(length(eddypro_numeric$h2o_flux)*.7))
#тестовая выборка
test = row_numbers[-teach]
#запишем данные из выборок в таблицы
teaching_tbl = eddypro_numeric[teach,]
testing_tbl = eddypro_numeric[test,]
# МОДЕЛЬ 1 по обучающей выборке
mod1 = lm(h2o_flux~ (.) , data = teaching_tbl)
#коэффициенты
coef(mod1)
#остатки
resid(mod1)
#доверительный интервал
confint(mod1)
#P-значения по модели
summary(mod1)
#дисперсионный анализ
anova(mod1)
#графическое представление модели:
plot(mod1)
+ co2_flux + rand_err_h2o_flux + H_strg + co2_v_minus_adv + h2o_v_minus_adv
+ co2_molar_density + co2_mole_fraction + co2_mixing_ratio + h2o_molar_density
+ h2o_mole_fraction + h2o_mixing_ratio + sonic_temperature + air_temperature
+ air_pressure + air_density + air_heat_capacity + air_molar_volume + e + es
+ specific_humidity + VPD + Tdew + u_unrot + v_unrot + w_unrot + u_rot + v_rot
+ w_rot + max_speed + wind_dir + yaw + pitch + u_star_ + L + L_z_minus_dL__div_L
+ T_star_ + x_peak + x_offset + x_10_perc_ + x_30_perc_ + x_70_perc_ + un_Tau
+ Tau_scf + un_H + H_scf + un_LE + LE_scf + un_co2_flux + w_spikes + co2_spikes
+ h2o_spikes + u_var + v_var + co2_var + h2o_var + w_div_h2o_cov + co2 + h2o
+ co2_signal_strength_7200 + flowrate, data = teaching_tbl)
#коэффициенты
coef(mod2)
#остатки
resid(mod2)
#доверительный интервал
confint(mod2)
#P-значения по модели
summary(mod2)
#дисперсионный анализ
anova(mod2)
anova(mod2, mod1)
#графическое представление модели:
plot(mod2)
# МОДЕЛЬ 3
mod3 = lm ( h2o_flux~ DOY + file_records + Tau + qc_Tau + rand_err_Tau + H
+ qc_H + rand_err_H + LE + qc_LE + rand_err_LE + qc_h2o_flux
+ rand_err_co2_flux + co2_flux + rand_err_h2o_flux+ H_strg
+ co2_v_minus_adv + h2o_v_minus_adv + co2_molar_density
+ co2_mole_fraction + co2_mixing_ratio + h2o_molar_density, data = teaching_tbl)
#коэффициенты
coef(mod3)
#остатки
resid(mod3)
#доверительный интервал
confint(mod3)
#P-значения по модели
summary(mod3)
#дисперсионный анализ
anova(mod3)
anova(mod3, mod2)
#графическое представление модели:
plot(mod3)
rand_err_co2_flux, co2_flux, rand_err_h2o_flux, H_strg,
co2_v_minus_adv, h2o_v_minus_adv, h2o_molar_density,
h2o_mole_fraction, h2o_mixing_ratio, co2_molar_density)
cor_td = cor(cor_teaching_tbl) %>% as.data.frame
# графически отображаем
qplot(h2o_flux , h2o_flux, data = teaching_tbl) + geom_line(aes(y = predict(mod3, teaching_tbl)))
qplot(h2o_flux , h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(DOY, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(Tau, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
qplot(h2o_flux, h2o_flux, data = testing_tbl) + geom_line(aes(y = predict(mod3, testing_tbl)))
